package com.springfield.framework.core.auth;


import com.springfield.framework.service.spotify.api.LoginService;
import io.restassured.response.Response;
import lombok.extern.slf4j.Slf4j;

import java.time.Instant;

import static com.springfield.framework.data.Constants.ACCESS_TOKEN;

/**
 * This class will generate Access Token to access the APIs for any given AWS App.
 * It calls the InitiateAuth operation with User Credentials with AppUsername and SRP.
 * We're using AmazonCognitoIdentity credentials object {AWS.CognitoIdentityCredentials} to enable authentication of users through third-party identity providers.
 */
@Slf4j
public class AccessTokenManager {

    private static String accessToken;
    private static Instant expiryTime;
    private static Boolean isAdmin = false;
    private static final int expiryDuration = 600;

    /**
     * @return It consumes AccessToken generated by the login service to generate a Bearer Token which could be used for accessing APIs.
     */
    public synchronized static String generateBearerAccessToken(){
        try {
            if (accessToken == null || Instant.now().isAfter(expiryTime)){

                Response loginResponse = new LoginService().postResponse();
                accessToken = loginResponse.path(ACCESS_TOKEN);
                expiryTime = Instant.now().plusSeconds(expiryDuration - 300);

            } else {
                log.info("Token is still Active.");
            }
        } catch (Exception e) {
            log.info(e.getMessage());
            throw new RuntimeException(e.getMessage());
        } return accessToken;
    }


}
