plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.33.0'
	id "com.palantir.docker-run" version "0.33.0"
}

group = 'works.springfield'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

def dockerOwner = 'suryajit7'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.17.3")
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.springframework:spring-test:5.3.22'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.10'

	implementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	implementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	implementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'

	implementation 'mysql:mysql-connector-java:8.0.30'

	implementation 'org.seleniumhq.selenium:selenium-java:4.4.0'

	implementation 'org.testcontainers:testcontainers:1.17.3'
	implementation 'org.testcontainers:mysql:1.17.3'
	implementation 'org.testcontainers:mongodb:1.17.3'
	implementation 'org.testcontainers:postgresql:1.17.3'
	implementation 'org.testcontainers:kafka:1.17.3'


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.9.0'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.graphql:spring-graphql-test'

}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// makes BuildProperties available from Spring context
springBoot {
	buildInfo()
}

// takes templatized Dockerfile, places into buildDir
task prepareDockerfileTemplate(type: Copy) {
    from "src/main/java/works/springfield/framework/env/docker"
	include "Dockerfile"
	filter { it.replaceAll('<%=name%>', project.name) }
	filter { it.replaceAll('<%=version%>', project.version) }
	into "$buildDir"
}

// add explicit dependencies, otherwise we get warning at console
dockerPrepare.dependsOn bootJar
bootJar.dependsOn prepareDockerfileTemplate
bootJarMainClassName.dependsOn prepareDockerfileTemplate
bootRunMainClassName.dependsOn prepareDockerfileTemplate

// https://plugins.gradle.org/plugin/com.palantir.docker
docker {
	name "${dockerOwner}/${project.name}:${project.version}"
	files "$buildDir/libs/${project.name}-${project.version}.jar"
	dockerfile file("$buildDir/Dockerfile")
}

// https://plugins.gradle.org/plugin/com.palantir.docker-run
dockerRun {
	name "${project.name}"
	image "${dockerOwner}/${project.name}:${project.version}"
	ports '8080:8080','8081:8081'
	clean true
	daemonize false
}

